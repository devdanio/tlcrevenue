/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardNetRevenueWaterfallImport } from './routes/dashboard/net-revenue-waterfall'
import { Route as DashboardHistoricalNetRevenueImport } from './routes/dashboard/historical-net-revenue'
import { Route as DashboardEstimatedRemainingCollectionsImport } from './routes/dashboard/estimated-remaining-collections'
import { Route as DashboardEstimatedNetRevenueImport } from './routes/dashboard/estimated-net-revenue'
import { Route as DashboardSettingsProfileImport } from './routes/dashboard/settings/profile'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardNetRevenueWaterfallRoute =
  DashboardNetRevenueWaterfallImport.update({
    id: '/net-revenue-waterfall',
    path: '/net-revenue-waterfall',
    getParentRoute: () => DashboardRoute,
  } as any)

const DashboardHistoricalNetRevenueRoute =
  DashboardHistoricalNetRevenueImport.update({
    id: '/historical-net-revenue',
    path: '/historical-net-revenue',
    getParentRoute: () => DashboardRoute,
  } as any)

const DashboardEstimatedRemainingCollectionsRoute =
  DashboardEstimatedRemainingCollectionsImport.update({
    id: '/estimated-remaining-collections',
    path: '/estimated-remaining-collections',
    getParentRoute: () => DashboardRoute,
  } as any)

const DashboardEstimatedNetRevenueRoute =
  DashboardEstimatedNetRevenueImport.update({
    id: '/estimated-net-revenue',
    path: '/estimated-net-revenue',
    getParentRoute: () => DashboardRoute,
  } as any)

const DashboardSettingsProfileRoute = DashboardSettingsProfileImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/estimated-net-revenue': {
      id: '/dashboard/estimated-net-revenue'
      path: '/estimated-net-revenue'
      fullPath: '/dashboard/estimated-net-revenue'
      preLoaderRoute: typeof DashboardEstimatedNetRevenueImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/estimated-remaining-collections': {
      id: '/dashboard/estimated-remaining-collections'
      path: '/estimated-remaining-collections'
      fullPath: '/dashboard/estimated-remaining-collections'
      preLoaderRoute: typeof DashboardEstimatedRemainingCollectionsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/historical-net-revenue': {
      id: '/dashboard/historical-net-revenue'
      path: '/historical-net-revenue'
      fullPath: '/dashboard/historical-net-revenue'
      preLoaderRoute: typeof DashboardHistoricalNetRevenueImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/net-revenue-waterfall': {
      id: '/dashboard/net-revenue-waterfall'
      path: '/net-revenue-waterfall'
      fullPath: '/dashboard/net-revenue-waterfall'
      preLoaderRoute: typeof DashboardNetRevenueWaterfallImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/settings/profile': {
      id: '/dashboard/settings/profile'
      path: '/settings/profile'
      fullPath: '/dashboard/settings/profile'
      preLoaderRoute: typeof DashboardSettingsProfileImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardEstimatedNetRevenueRoute: typeof DashboardEstimatedNetRevenueRoute
  DashboardEstimatedRemainingCollectionsRoute: typeof DashboardEstimatedRemainingCollectionsRoute
  DashboardHistoricalNetRevenueRoute: typeof DashboardHistoricalNetRevenueRoute
  DashboardNetRevenueWaterfallRoute: typeof DashboardNetRevenueWaterfallRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardSettingsProfileRoute: typeof DashboardSettingsProfileRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardEstimatedNetRevenueRoute: DashboardEstimatedNetRevenueRoute,
  DashboardEstimatedRemainingCollectionsRoute:
    DashboardEstimatedRemainingCollectionsRoute,
  DashboardHistoricalNetRevenueRoute: DashboardHistoricalNetRevenueRoute,
  DashboardNetRevenueWaterfallRoute: DashboardNetRevenueWaterfallRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardSettingsProfileRoute: DashboardSettingsProfileRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/estimated-net-revenue': typeof DashboardEstimatedNetRevenueRoute
  '/dashboard/estimated-remaining-collections': typeof DashboardEstimatedRemainingCollectionsRoute
  '/dashboard/historical-net-revenue': typeof DashboardHistoricalNetRevenueRoute
  '/dashboard/net-revenue-waterfall': typeof DashboardNetRevenueWaterfallRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/settings/profile': typeof DashboardSettingsProfileRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/estimated-net-revenue': typeof DashboardEstimatedNetRevenueRoute
  '/dashboard/estimated-remaining-collections': typeof DashboardEstimatedRemainingCollectionsRoute
  '/dashboard/historical-net-revenue': typeof DashboardHistoricalNetRevenueRoute
  '/dashboard/net-revenue-waterfall': typeof DashboardNetRevenueWaterfallRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/settings/profile': typeof DashboardSettingsProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/estimated-net-revenue': typeof DashboardEstimatedNetRevenueRoute
  '/dashboard/estimated-remaining-collections': typeof DashboardEstimatedRemainingCollectionsRoute
  '/dashboard/historical-net-revenue': typeof DashboardHistoricalNetRevenueRoute
  '/dashboard/net-revenue-waterfall': typeof DashboardNetRevenueWaterfallRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/settings/profile': typeof DashboardSettingsProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/estimated-net-revenue'
    | '/dashboard/estimated-remaining-collections'
    | '/dashboard/historical-net-revenue'
    | '/dashboard/net-revenue-waterfall'
    | '/dashboard/'
    | '/dashboard/settings/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/estimated-net-revenue'
    | '/dashboard/estimated-remaining-collections'
    | '/dashboard/historical-net-revenue'
    | '/dashboard/net-revenue-waterfall'
    | '/dashboard'
    | '/dashboard/settings/profile'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/estimated-net-revenue'
    | '/dashboard/estimated-remaining-collections'
    | '/dashboard/historical-net-revenue'
    | '/dashboard/net-revenue-waterfall'
    | '/dashboard/'
    | '/dashboard/settings/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/estimated-net-revenue",
        "/dashboard/estimated-remaining-collections",
        "/dashboard/historical-net-revenue",
        "/dashboard/net-revenue-waterfall",
        "/dashboard/",
        "/dashboard/settings/profile"
      ]
    },
    "/dashboard/estimated-net-revenue": {
      "filePath": "dashboard/estimated-net-revenue.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/estimated-remaining-collections": {
      "filePath": "dashboard/estimated-remaining-collections.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/historical-net-revenue": {
      "filePath": "dashboard/historical-net-revenue.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/net-revenue-waterfall": {
      "filePath": "dashboard/net-revenue-waterfall.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings/profile": {
      "filePath": "dashboard/settings/profile.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
